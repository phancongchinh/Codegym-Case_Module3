DROP DATABASE IF EXISTS module3_case_database;

CREATE DATABASE module3_case_database;

USE module3_case_database;

DROP TABLE IF EXISTS category;

CREATE TABLE category
(
    PRIMARY KEY (id),
    id   int AUTO_INCREMENT,
    name varchar(45) NOT NULL UNIQUE
);

DROP TABLE IF EXISTS vendor;

CREATE TABLE vendor
(
    PRIMARY KEY (id),
    id      int AUTO_INCREMENT,
    name    varchar(45) NOT NULL UNIQUE,
    address varchar(100)
);

DROP TABLE IF EXISTS discount;

CREATE TABLE discount
(
    PRIMARY KEY (id),
    id         int AUTO_INCREMENT,
    percentage int NOT NULL UNIQUE
);

DROP TABLE IF EXISTS product;

CREATE TABLE product
(
    PRIMARY KEY (id),
    id                 int AUTO_INCREMENT,
    name               varchar(100) NOT NULL UNIQUE,
    description        varchar(100) NOT NULL,
    price              double       NOT NULL,
    brand              varchar(45)  NOT NULL,
    SKU                varchar(45)  NOT NULL UNIQUE,
    category_id        int          NOT NULL,
    vendor_id          int          NOT NULL,
    discount_id        int          NOT NULL,
    created_at         date         NOT NULL,
    last_modified_at   date,
    delete_at          date,
    FOREIGN KEY (category_id) REFERENCES category (id),
    FOREIGN KEY (vendor_id) REFERENCES vendor (id),
    FOREIGN KEY (discount_id) REFERENCES discount (id)
);

DROP TABLE IF EXISTS image;

CREATE TABLE image
(
    PRIMARY KEY (id),
    id         int AUTO_INCREMENT,
    src        varchar(100),
    name       varchar(100),
    product_id int NOT NULL,
    FOREIGN KEY (product_id) REFERENCES product (id)
);

DROP TABLE IF EXISTS role;

CREATE TABLE role
(
    PRIMARY KEY (id),
    id   int AUTO_INCREMENT,
    name varchar(25)
);

DROP TABLE IF EXISTS user;

CREATE TABLE user
(
    PRIMARY KEY (id),
    id               int AUTO_INCREMENT,
    username         varchar(25)  NOT NULL UNIQUE,
    password         varchar(25)  NOT NULL,
    first_name       varchar(25)  NOT NULL,
    last_name        varchar(25)  NOT NULL,
    address          varchar(100) NOT NULL,
    telephone        varchar(10)  NOT NULL UNIQUE,
    email            varchar(45)  NOT NULL UNIQUE,
    created_at       date         NOT NULL,
    last_modified_at date,
    delete_at        date
);

DROP TABLE IF EXISTS user_role;

CREATE TABLE user_role
(
    PRIMARY KEY (user_id, role_id),
    user_id int NOT NULL,
    role_id int NOT NULL,
    FOREIGN KEY (user_id) REFERENCES user (id),
    FOREIGN KEY (role_id) REFERENCES role (id)
);

DROP TABLE IF EXISTS payment;

CREATE TABLE payment
(
    PRIMARY KEY (id),
    id   int AUTO_INCREMENT,
    name varchar(45) NOT NULL UNIQUE
);

DROP TABLE IF EXISTS shipment;

CREATE TABLE shipment
(
    PRIMARY KEY (id),
    id   int AUTO_INCREMENT,
    name varchar(45)
);

DROP TABLE IF EXISTS status;

CREATE TABLE status
(
    PRIMARY KEY (id),
    id   int AUTO_INCREMENT,
    name varchar(45)
);

DROP TABLE IF EXISTS `order`;

CREATE TABLE `order`
(
    PRIMARY KEY (id),
    id               int AUTO_INCREMENT,
    user_id          int  NOT NULL,
    payment_id       int  NOT NULL,
    shipment_id      int  NOT NULL,
    status_id        int  NOT NULL,
    created_at       date NOT NULL,
    last_modified_at date,
    delete_at        date,
    FOREIGN KEY (user_id) REFERENCES user (id),
    FOREIGN KEY (payment_id) REFERENCES payment (id),
    FOREIGN KEY (shipment_id) REFERENCES shipment (id),
    FOREIGN KEY (status_id) REFERENCES status (id)
);

DROP TABLE IF EXISTS ordered_item;

CREATE TABLE ordered_item
(
    PRIMARY KEY (order_id, product_id),
    order_id   int NOT NULL,
    product_id int NOT NULL,
    quantity   int NOT NULL,
    FOREIGN KEY (order_id) REFERENCES `order` (id),
    FOREIGN KEY (product_id) REFERENCES product (id)
)